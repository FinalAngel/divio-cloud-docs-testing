Project configuration files
===========================

There are two key configuration files in Docker:

.. _dockerfile-reference:

The ``Dockerfile``
------------------

Each :ref:`Docker image <image-reference>` is defined by a ``Dockerfile``, that
describes what is in the image and how :ref:`containers <container-reference>`
created from it should be built.

The Dockerfile is simply a text document, containing all the commands that would be issued on the command-line to build an image.

An example Divio Cloud ``Dockerfile`` (all our ``Dockerfiles`` follow a
generally similar pattern).

Hashes (``#``) indicate a comment. Sections within angle brackets, such as
``<DOCKER_FROM>...</DOCKER_FROM>``, are autogenerated by the Divio Cloud, and
may be updated or changed on deployment without warning. As the note advises,
removing these wrapping tags will prevent this.

..  code-block:: Dockerfile

    # <WARNING>
    # Everything within sections like <TAG> is generated and can
    # be automatically replaced on deployment. You can disable
    # this functionality by simply removing the wrapping tags.
    # </WARNING>


This image is built upon the ``aldryn/base-project:py3-3.23`` image. This
corresponds to the *Base Project:* ``Python 3 v3.23`` that you would see in the
project's *General Settings*:

..  code-block:: Dockerfile
    :emphasize-lines: 2

    # <DOCKER_FROM>
    FROM aldryn/base-project:py3-3.23
    # </DOCKER_FROM>

The ``NPM`` and ``BOWER`` (and further down, ``GULP``) sections of the
``Dockerfile`` are empty; if this project were using a more complex
:ref:`Boilerplate <boilerplates_reference>` for the frontend, a number of
different commands would appear there:

..  code-block:: Dockerfile

    # <NPM>
    # </NPM>

    # <BOWER>
    # </BOWER>


The ``PYTHON`` section installs the project's Python requirements, whether
set up as Divio Cloud addons, or listed in the ``requirements.in``.

..  code-block:: Dockerfile

    # <PYTHON>
    ENV PIP_INDEX_URL=${PIP_INDEX_URL:-https://wheels.aldryn.net/v1/aldryn-extras+pypi/${WHEELS_PLATFORM:-aldryn-baseproject-py3}/+simple/} \
        WHEELSPROXY_URL=${WHEELSPROXY_URL:-https://wheels.aldryn.net/v1/aldryn-extras+pypi/${WHEELS_PLATFORM:-aldryn-baseproject-py3}/}
    COPY requirements.* /app/
    COPY addons-dev /app/addons-dev/
    RUN pip-reqs compile && \
        pip-reqs resolve && \
        pip install \
            --no-index --no-deps \
            --requirement requirements.urls
    # </PYTHON>

The ``SOURCE`` section copies the project files to the ``/app`` directory of
the container:

..  code-block:: Dockerfile

    # <SOURCE>
    COPY . /app
    # </SOURCE>

The ``GULP`` section is unused in this Boilerplate:

..  code-block:: Dockerfile

    # <GULP>
    # </GULP>

The final act of the Boilerplate is to issue the Django ``collectstatic``
command to copy static files to the location from where the web server will
serve them:

..  code-block:: Dockerfile

    # <STATIC>
    RUN DJANGO_MODE=build python manage.py collectstatic --noinput
    # </STATIC>


.. _docker-compose-yml-reference:

The ``docker-compose.yml``
--------------------------

In order to do something useful with containers, they have to be arranged as
part of a project, usually referred to as an 'application'. This is what a
``docker-compose.yml`` file does, specifying what images are required, what
ports they need to expose, whether the have access to the host filesystem, what
commands should be run, and so on.

The ``docker-compose.yml`` in Divio Cloud projects builds a ``web`` service in
a container using its ``Dockerfile``. It also builds a ``db`` service, from a
standard ``postgres:9.4`` image.

Most Divio Cloud projects will use this ``docker-compose.yml``, or something
very similar to it.

..  code-block:: yaml

    web:
     build: .
     links:
      - "db:postgres"
     ports:
      - "8000:80"
     volumes:
      - ".:/app:rw"
      - "./data:/data:rw"
     command: python manage.py runserver 0.0.0.0:80
     env_file: .env-local
    db:
     image: postgres:9.4
     volumes:
      - ".:/app:rw"

The first definition in the file is for the ``web`` service. In order, the
directives mean:

* ``build``: build it from the ``Dockerfile`` in the parent directory
* ``links``: link to the database container
* ``ports``: map the external port 8000 to the internal port 80
* ``volumes``:
    * map the parent directory on the host to ``/app`` in the container, with
      read and write access
    * map the ``data`` directory on the host to ``/data`` in the container,
      with read and write access
* ``command``: by default, when the command ``docker-compose run`` is issued,
  execute ``python manage.py runserver 0.0.0.0:80``
* ``env_file``: use the ``.env-local`` to supply environment variables to the
  container


The second definition is for the ``db`` service. On the Cloud, the project's
database runs on an AWS server; locally, it runs on a Postgres instance in
``db``.

The directives mean:

* ``image``: build the container from the ``postgres:9.4`` image
* ``volumes``: map the parent directory on the host to ``/app`` in the
  container, with read and write access

See :ref:`expose-database-ports` for an example of adding configuration to
``docker-compose.yml``.
