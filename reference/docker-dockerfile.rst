.. _dockerfile-reference:

The ``Dockerfile``
==================

Each :ref:`Docker image <image-reference>` is defined by a ``Dockerfile``, that
describes what is in the image and how :ref:`containers <container-reference>`
created from it should be built.

The Dockerfile is simply a text document, containing all the commands that
would be issued on the command-line to build an image.

You can add any commands you wish to the ``Dockerfile``, for example to
:ref:`install system packages <install-system-packages>`, or to configure the
environment - in short, the ``Dockerfile`` defines an environment.

An example Divio Cloud ``Dockerfile``
-------------------------------------

(All our ``Dockerfiles`` follow a generally similar pattern).

Hashes (``#``) indicate a comment. Sections within angle brackets, such as
``<DOCKER_FROM>...</DOCKER_FROM>``, are autogenerated by the Divio Cloud
Control Panel, and may be updated or changed on deployment without warning. As
the note advises, removing these wrapping tags will prevent this.

..  code-block:: Dockerfile

    # <WARNING>
    # Everything within sections like <TAG> is generated and can
    # be automatically replaced on deployment. You can disable
    # this functionality by simply removing the wrapping tags.
    # </WARNING>


This image is built upon the ``aldryn/base-project:py3-3.23`` image. This
corresponds to the *Base Project:* ``Python 3 v3.23`` that you would see in the
project's *General Settings*:

..  code-block:: Dockerfile
    :emphasize-lines: 2

    # <DOCKER_FROM>
    FROM aldryn/base-project:py3-3.23
    # </DOCKER_FROM>

The ``NPM`` and ``BOWER`` (and further down, ``GULP``) sections of the
``Dockerfile`` are empty; if this project were using a more complex
:ref:`Boilerplate <boilerplates_reference>` for the frontend, a number of
different commands would appear there:

..  code-block:: Dockerfile

    # <NPM>
    # </NPM>

    # <BOWER>
    # </BOWER>


The ``PYTHON`` section installs the project's Python requirements, whether
set up as Divio Cloud addons, or listed in the ``requirements.in``.

..  code-block:: Dockerfile

    # <PYTHON>
    ENV PIP_INDEX_URL=${PIP_INDEX_URL:-https://wheels.aldryn.net/v1/aldryn-extras+pypi/${WHEELS_PLATFORM:-aldryn-baseproject-py3}/+simple/} \
        WHEELSPROXY_URL=${WHEELSPROXY_URL:-https://wheels.aldryn.net/v1/aldryn-extras+pypi/${WHEELS_PLATFORM:-aldryn-baseproject-py3}/}
    COPY requirements.* /app/
    COPY addons-dev /app/addons-dev/
    RUN pip-reqs compile && \
        pip-reqs resolve && \
        pip install \
            --no-index --no-deps \
            --requirement requirements.urls
    # </PYTHON>

The ``SOURCE`` section copies the project files to the ``/app`` directory of
the container:

..  code-block:: Dockerfile

    # <SOURCE>
    COPY . /app
    # </SOURCE>

The ``GULP`` section is unused in this Boilerplate:

..  code-block:: Dockerfile

    # <GULP>
    # </GULP>

The final act of the Boilerplate is to issue the Django ``collectstatic``
command to copy static files to the location from where the web server will
serve them:

..  code-block:: Dockerfile

    # <STATIC>
    RUN DJANGO_MODE=build python manage.py collectstatic --noinput
    # </STATIC>
